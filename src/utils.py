import os
import pandas as pd
from kaggle.api.kaggle_api_extended import KaggleApi

RND_SEED = 42

def download_telco_churn_dataset(data_dir='../data/raw'):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç Telco Customer Churn —Å Kaggle
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(data_dir, exist_ok=True)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Kaggle API
        api = KaggleApi()
        api.authenticate()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
        dataset_name = 'blastchar/telco-customer-churn'
        api.dataset_download_files(dataset_name, path=data_dir, unzip=True)
        
        print(f"‚úÖ –î–∞—Ça—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –≤ –ø–∞–ø–∫—É: {data_dir}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        files = os.listdir(data_dir)
        print(f"üìÅ –°–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {files}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        csv_file = [f for f in files if f.endswith('.csv')][0]
        df = pd.read_csv(os.path.join(data_dir, csv_file))
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {df.shape}")
        print(f"üéØ –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'Churn': {df['Churn'].value_counts().to_dict()}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        return None
    
def split_test_train(df):
    y = df['Churn'].map({'Yes': 1, 'No': 0})
    X = df.drop('Churn', axis=1)
    
    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=RND_SEED, stratify=y
    )
    
    return (X_train, X_test, y_train, y_test)

if __name__ == "__main__":
    df = download_telco_churn_dataset()